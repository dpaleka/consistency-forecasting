###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-opus-20240229\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> FastAnthropic {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastOpenAI {\n  provider openai\n  options {\n    model \"gpt-3.5-turbo\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [FastAnthropic, FastOpenAI]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT4, FastOpenAI]\n  }\n}",
    "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n}\n        ",
    "synthetic_question.baml": "class SyntheticQuestion {\n    title string\n    category string\n    tags string\n    feedback string?\n    fixed bool?\n}\n\nclass QuestionGenerationResponse3 {\n    question_1 SyntheticQuestion\n    question_2 SyntheticQuestion\n    question_3 SyntheticQuestion\n}\n\nclass GenerateQuestionInput {\n    example_questions SyntheticQuestion[]\n    category string\n    tags string[]\n}\n\nfunction GenerateSyntheticQuestions(input: GenerateQuestionInput) -> QuestionGenerationResponse3 {\n    client GPT4o\n\n    prompt #\"\n        I want you to help me generate three forecasting questions for a forecasting market site like Metaculus or PredictIt.\n        I will provide you with a category and some tags. Your task is to generate questions that can be answered with a probability between 0 and 1.\n        For each tag, generate a relevant question if the tag is pertinent to the category. If the tag is not relevant, generate a general question about the category.\n        Examples:\n        {% for question in input.example_questions %}\n        Example:\n        - Title: {{ question.title }}\n        - Category: {{ question.category }}\n        - Tags: {{ question.tags | join(', ') }}\n        {% endfor %}\n        ----\n        Category: {{ input.category }}\n        Tags: {{ input.tags | join(', ') }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest generate_synthetic_questions_test {\n  functions [GenerateSyntheticQuestions]\n  args {\n    input {\n      example_questions [\n        { \n          title #\"Impact of AI on Global Economy\"#\n          category #\"Economics\"#\n          tags [#\"AI\"#, #\"global\"#, #\"economy\"#]\n        }\n        { \n          title #\"Probability of Interstellar Travel by 2100\"#\n          category #\"Technology\"#\n          tags [#\"space\"#, #\"travel\"#, #\"future\"#]\n        }\n      ]\n      category #\"Science\"#\n      tags [#\"innovation\"#, #\"research\"#]\n    }\n  }\n}",
}

def get_baml_files():
    return file_map