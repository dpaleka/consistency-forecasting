{
    "NegChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "AndChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "OrChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "AndOrChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "ButChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "CondChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "ConsequenceChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "ParaphraseChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "CondCondChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "ExpectedEvidenceChecker": {
        "error": "Failed to cast to BaseSentenceFormat_stripped: 1 validation error for ForecastingQuestion_stripped\nbody\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type"
    },
    "aggregated": {
        "default": {
            "avg_violation": NaN
        },
        "frequentist": {
            "avg_violation": NaN
        },
        "default_scaled": {
            "avg_violation": NaN
        }
    },
    "forecaster": "ConsistentForecaster",
    "full_forecaster_config": {
        "hypocrite": {
            "model": "gpt-4o-mini",
            "preface": "You are an informed and well-calibrated forecaster. I need you to give me your best probability estimate for the following sentence or question resolving YES. Your answer should be a float between 0 and 1, with nothing else in your response.",
            "examples": []
        },
        "checks": [
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            },
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            }
        ],
        "base_data_path": "/home/abhim/consistency-forecasting/src/data/fq/real/questions_cleaned_formatted.jsonl",
        "instantiation_kwargs": {
            "verify_before_instantiation": false,
            "model": "gpt-4o-mini",
            "cost_log": null,
            "simulate": false
        },
        "bq_func_kwargs": {
            "model": "gpt-4o-mini",
            "cost_log": null,
            "simulate": false
        },
        "call_kwargs": {}
    }
}