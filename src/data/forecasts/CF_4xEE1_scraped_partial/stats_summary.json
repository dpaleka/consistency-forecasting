{
    "NegChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=54.14413158830733, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "AndChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=142445009.2621226, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "OrChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=93813347.61851346, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "AndOrChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=3335.0217992402195, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "ButChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=-2.211937705401999e-14, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "CondChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=-3190480.9234116147, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "ConsequenceChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=1.0000000000000058, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "ParaphraseChecker": {
        "error": "1 validation error for Forecast\nprob\n  Value error, Probability must be between 0 and 1. [type=value_error, input_value=65.48410169192826, input_type=float64]\n    For further information visit https://errors.pydantic.dev/2.9/v/value_error"
    },
    "CondCondChecker": {
        "overall": {
            "default": {
                "label": "CondCondChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 134,
                "avg_violation": 0.031917,
                "avg_violation_no_outliers": 0.031152,
                "median_violation": 0.024432
            },
            "frequentist": {
                "label": "CondCondChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 189,
                "avg_violation": 0.298088,
                "avg_violation_no_outliers": 0.297343,
                "median_violation": 0.29029
            },
            "default_scaled": {
                "label": "CondCondChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 114,
                "avg_violation": 0.007979,
                "avg_violation_no_outliers": 0.007788,
                "median_violation": 0.006108
            }
        }
    },
    "ExpectedEvidenceChecker": {
        "overall": {
            "default": {
                "label": "ExpectedEvidenceChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 59,
                "avg_violation": 0.013427,
                "avg_violation_no_outliers": 0.012407,
                "median_violation": 0.001608
            },
            "frequentist": {
                "label": "ExpectedEvidenceChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 98,
                "avg_violation": 0.167638,
                "avg_violation_no_outliers": 0.165439,
                "median_violation": 0.12551
            },
            "default_scaled": {
                "label": "ExpectedEvidenceChecker",
                "num_samples_including_errors": 200,
                "num_samples": 200,
                "num_violations": 42,
                "avg_violation": 0.003357,
                "avg_violation_no_outliers": 0.003102,
                "median_violation": 0.000402
            }
        }
    },
    "aggregated": {
        "default": {
            "avg_violation": 0.022672
        },
        "frequentist": {
            "avg_violation": 0.23286300000000001
        },
        "default_scaled": {
            "avg_violation": 0.005668
        }
    },
    "forecaster": "ConsistentForecaster",
    "full_forecaster_config": {
        "hypocrite": {
            "model": "gpt-4o-mini-2024-07-18",
            "preface": "You are an informed and well-calibrated forecaster. I need you to give me your best probability estimate for the following sentence or question resolving YES. Your answer should be a float between 0 and 1, with nothing else in your response.",
            "examples": []
        },
        "checks": [
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            },
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            },
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            },
            {
                "name": "ExpectedEvidenceChecker",
                "default_tolerance": 0.01,
                "frequentist_hparams": {
                    "sigma": 0.05,
                    "gamma": 2.58,
                    "beta": 0.001
                },
                "path": "/home/abhim/consistency-forecasting/src/data/tuples/ExpectedEvidenceChecker.jsonl"
            }
        ],
        "base_data_path": "/home/abhim/consistency-forecasting/src/data/fq/real/questions_cleaned_formatted.jsonl",
        "instantiation_kwargs": {
            "verify_before_instantiation": false,
            "model": "gpt-4o-mini-2024-07-18",
            "cost_log": null,
            "simulate": false
        },
        "bq_func_kwargs": {
            "model": "gpt-4o-mini-2024-07-18",
            "cost_log": null,
            "simulate": false
        },
        "call_kwargs": {}
    }
}